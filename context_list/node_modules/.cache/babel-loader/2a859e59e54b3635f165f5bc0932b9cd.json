{"ast":null,"code":"var _jsxFileName = \"/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useReducer } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Header from \"./Header\";\nimport Content from \"./Content\";\nimport { makeServer } from \"./server.js\";\nimport ToDoContext from './context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  makeServer();\n  const [todos, setTodos] = useState([]);\n  const [todo, setTodo] = useState(\"\");\n  const todoContext = useMemo(() => ({\n    addTodo: async data => {\n      await fetch(\"api/todo/create\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          \"name\": \"Something to do\",\n          \"isComplete\": false\n        })\n      });\n      dispatch({\n        type: \"ADD\"\n      });\n    },\n    listTodo: async data => {\n      dispatch({\n        type: \"LIST\",\n        value: data\n      });\n      console.log(state.todosFcontext);\n    }\n  }), []);\n  const [state, dispatch] = useReducer((prevState, action) => {\n    switch (action.type) {\n      case \"ADD\":\n        return { ...prevState,\n          isLoading: true\n        };\n\n      case \"LIST\":\n        return { ...prevState,\n          todosFcontext: action.value\n        };\n    }\n  }, {\n    isLoading: true,\n    todosFcontext: []\n  }); // useEffect(() => {\n  //   fetch(\"api/users\" , {\n  //     headers : { \n  //       'Content-Type': 'application/json',\n  //       'Accept': 'application/json'\n  //      }\n  //   })\n  //     .then((result) => result.json())\n  //     .then((resp) => {\n  //       // console.warn(resp)\n  //       setTodo(resp)\n  //     })\n  //   }\n  // )\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(ToDoContext.Provider, {\n        value: todoContext\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Erc6EEZZq+gvTXyJNycCI9Y0DU8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/rafnaali/Desktop/Todo-list/BlueSky-project/src/App.js"],"names":["React","useState","useMemo","useReducer","Header","Content","makeServer","ToDoContext","App","todos","setTodos","todo","setTodo","todoContext","addTodo","data","fetch","method","body","JSON","stringify","dispatch","type","listTodo","value","console","log","state","todosFcontext","prevState","action","isLoading"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAkCC,UAAlC,QAAoD,OAApD;;AAEA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAAQC,UAAR,QAAyB,aAAzB;AACA,OAAOC,WAAP,MAAwB,WAAxB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACbF,EAAAA,UAAU;AAGV,QAAM,CAACG,KAAD,EAAOC,QAAP,IAAmBT,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACU,IAAD,EAAMC,OAAN,IAAiBX,QAAQ,CAAC,EAAD,CAA/B;AAEA,QAAMY,WAAW,GAAGX,OAAO,CACzB,OAAO;AACLY,IAAAA,OAAO,EAAE,MAAOC,IAAP,IAAgB;AACvB,YAAMC,KAAK,CACP,iBADO,EAEP;AACEC,QAAAA,MAAM,EAAE,MADV;AAEEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CACF;AAAC,kBAAO,iBAAR;AAA0B,wBAAa;AAAvC,SADE;AAFR,OAFO,CAAX;AAQEC,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH,KAXI;AAaLC,IAAAA,QAAQ,EAAE,MAAOR,IAAP,IAAgB;AAEtBM,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,MAAR;AAAgBE,QAAAA,KAAK,EAACT;AAAtB,OAAD,CAAR;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,aAAlB;AACH;AAjBI,GAAP,CADyB,EAoBzB,EApByB,CAA3B;AAsBA,QAAM,CAACD,KAAD,EAAQN,QAAR,IAAoBlB,UAAU,CAClC,CAAC0B,SAAD,EAAYC,MAAZ,KAAuB;AACrB,YAAQA,MAAM,CAACR,IAAf;AACE,WAAK,KAAL;AACE,eAAO,EACL,GAAGO,SADE;AAELE,UAAAA,SAAS,EAAE;AAFN,SAAP;;AAIF,WAAK,MAAL;AACE,eAAO,EACL,GAAGF,SADE;AAELD,UAAAA,aAAa,EAAEE,MAAM,CAACN;AAFjB,SAAP;AAPJ;AAYD,GAdiC,EAelC;AACEO,IAAAA,SAAS,EAAE,IADb;AAEEH,IAAAA,aAAa,EAAE;AAFjB,GAfkC,CAApC,CA7Ba,CAqDb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,6BACA,QAAC,WAAD,CAAa,QAAb;AAAsB,QAAA,KAAK,EAAEf;AAA7B;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;GA5EQL,G;;KAAAA,G;AA8ET,eAAeA,GAAf","sourcesContent":["import React, { useState, useMemo,useReducer } from 'react';\nimport logo from './logo.svg';\nimport './App.css'\nimport Header from \"./Header\";\nimport Content from \"./Content\";\nimport {makeServer} from \"./server.js\";\nimport ToDoContext from './context'\n\nfunction App() {\n  makeServer();\n  \n \n  const [todos,setTodos] = useState([])\n  const [todo,setTodo] = useState(\"\")\n  \n  const todoContext = useMemo(\n    () => ({\n      addTodo: async (data) => {\n        await fetch(\n            \"api/todo/create\",\n            {\n              method: \"POST\",\n              body: JSON.stringify(\n                  {\"name\":\"Something to do\",\"isComplete\":false}),\n            }\n          )\n          dispatch({ type: \"ADD\" });\n      },\n\n      listTodo: async (data) => {\n      \n          dispatch({ type: \"LIST\", value:data });\n          console.log(state.todosFcontext)\n      },\n    }),\n    []\n  );\n  const [state, dispatch] = useReducer(\n    (prevState, action) => {\n      switch (action.type) {\n        case \"ADD\":\n          return {\n            ...prevState,\n            isLoading: true,\n          };\n        case \"LIST\":\n          return {\n            ...prevState,\n            todosFcontext: action.value\n          }\n      }\n    },\n    {\n      isLoading: true,\n      todosFcontext: [],\n    }\n  );\n\n\n \n\n  // useEffect(() => {\n  //   fetch(\"api/users\" , {\n  //     headers : { \n  //       'Content-Type': 'application/json',\n  //       'Accept': 'application/json'\n  //      }\n  //   })\n  //     .then((result) => result.json())\n  //     .then((resp) => {\n  //       // console.warn(resp)\n  //       setTodo(resp)\n  //     })\n  //   }\n  // )\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <ToDoContext.Provider value={todoContext}></ToDoContext.Provider>  \n      {/* <Content todos={todos} setTodos={setTodos} /> */}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}